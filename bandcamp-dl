#!/usr/bin/env ruby

require 'curb'
require 'nokogiri'
require 'ostruct'
require 'pry'
require 'securerandom'

def friendly(str)
  str.gsub(/[^a-zA-Z0-9'()",_ -]/,'').gsub('  ',' ')
end

def dedash(str)
  str.gsub('-','')
end

def gethref(str, domain)
  str.match(/^\//) ? "https://#{domain}#{str}" : str 
end

def getnoko(curl_res)
  Nokogiri::HTML.parse(curl_res.body_str)
end

def log_error(err)
  puts e.message
  puts e.backtrace
end

targetdir = Dir.pwd
url = ARGV[0]
yta = 'youtube-dl --no-mtime -o "%(autonumber)s-%(title)s.%(ext)s" -f "mp3/mp3-320/mp3-v0/m4a/vorbis/aac/mp3-128/flac/alac/aiff-lossless/wav"'
unless url.match(/^(http|https):\/\/[a-z0-9]+([\-\.]{1}[a-z0-9]+)*\.[a-z]{2,5}(:[0-9]{1,5})?(\/.*)?$/ix)
  puts "URL is invalid!"
  raise ArgumentError 
end
domain = url.split("/")[2].split('.')[0..2].join(".")

puts "Domain: #{domain}"
puts "Base directory: #{targetdir}..."

result = Curl.get(url)
noko = getnoko(result)

grid = noko.css('.music-grid')
if grid.empty?
  begin
    puts "Not a discography page, looking for that one to open..."
    link_to_discog = gethref(noko.css("a[href*='/music']")[0]['href'], domain)
    result = Curl.get(link_to_discog)
    noko = getnoko(result)
  rescue => e
    puts "Failed to find discography page, exiting."
    log_error(e)
    exit
  end
end

def get_album_links(elems)
  elems.map{|x|x.css("a[href*='bandcamp.com/album'], a[href^='/album/'], a[href^='/track/'], a[href*='bandcamp.com/track']")}.flatten
end

def get_album_name(l)
  return l.children.css('p').children.select{|x| x.is_a? Nokogiri::XML::Text }.map{|x|x.text }.join.strip
rescue => e
  puts "Warning: error retrieving album name"
  log_error(e)
  return SecureRandom.uuid
end

albumlinks = get_album_links(noko.css('.music-grid'))

albums = albumlinks.map do |l|
  a = OpenStruct.new
  a.href = gethref(l.attr('href'), domain)
  artistelem = l.css(".artist-override").first
  a.artist = artistelem ? friendly(artistelem.inner_text.to_s.strip) : false
  a.album = friendly(dedash(get_album_name(l)))
  a.folderpath = a.artist ? "#{a.artist} - #{a.album}" : a.album
  a
end

puts "Albums:"
  puts 
albums.each do |a|
  puts "Artist: #{a.artist}"
  puts "Album: #{a.album}"
  puts "Dir: #{a.folderpath}"
  puts "Link: #{a.href}"
  puts 
end

binding.pry

albums.each do |a|
  next if a.nil?

  newtarget = "#{targetdir}/#{a.folderpath}"

  puts "Downloading #{a.to_h.to_a.inspect}"
  puts "  into #{newtarget} ..."
  puts "  executing...\t #{yta} \"#{a.href}\""
  `mkdir -p "#{newtarget}"; cd "#{newtarget}"; #{yta} "#{a.href}"; cd "#{targetdir}"` 
  puts
end

puts albums.inspect

